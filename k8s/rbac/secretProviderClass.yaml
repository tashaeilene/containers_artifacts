# This is a SecretProviderClass example using user-assigned identity to access your key vault
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-kvname-user-msi
spec:
  provider: azure
  secretObjects:                                 # [OPTIONAL] SecretObject defines the desired state of synced K8s secret objects
  - secretName: db-secret
    type: Opaque
    data:
    - objectName: dbpass                    # name of the mounted content to sync. this could be the object name or object alias
      key: SQL_PASSWORD
    - objectName: dbuser                    # name of the mounted content to sync. this could be the object name or object alias
      key: SQL_USER
    - objectName: dbname                    # name of the mounted content to sync. this could be the object name or object alias
      key: SQL_DBNAME
    - objectName: dbhost                    # name of the mounted content to sync. this could be the object name or object alias
      key: SQL_SERVER                 
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"          # Set to true for using managed identity
    userAssignedIdentityID: a59bfa51-89fa-40d3-9dbd-81ed1c6c3602   # Set the clientID of the user-assigned managed identity to use
    keyvaultName: challenge4-aks-key-vault        # Set to the name of your key vault
    cloudName: ""                         # [OPTIONAL for Azure] if not provided, the Azure environment defaults to AzurePublicCloud
    objects:  |
      array:
        - |
          objectName: dbpass
          objectType: secret              # object types: secret, key, or cert
        - |
          objectName: dbuser
          objectType: secret
        - |
          objectName: dbname
          objectType: secret
        - |
          objectName: dbhost
          objectType: secret
    tenantId: 5d144b96-7e20-4705-9be9-67e91ebca8f9                 # The tenant ID of the key vault